
/* rem base */

// @include bp(lgmin) {
//   html {
//         /* font-size: 16px; */
//     }
// }

// @include bp(lg) {
//     html {
//         /* font-size: 15px; */
//     }
// }
// @include bp(tabletxl) {
//     html {
        
//     }
// }
// @include bp(tabletmd) {
//     html {
//        /*  font-size: 14px; */
//         /* font-size: 8px; */
//     }
// }
// @include bp(tablet) {
//     html {
//         /* font-size: 13px; */
//         /* font-size: 7px; */
//     }
// }
// @include bp(tabletsm) {
//     html {
        
//     }
// }
// @include bp(sm) {
//     html {
//         /* font-size: 12px; */
//         /* font-size: 6px; */
//     }
// }
// @include bp(xsm) {
//     html {
//         /* font-size: 11px; */
//         /* font-size: 5px; */
//     }
// }
// @include bp(xxsm) {
//     html {
        
//     }
// }




$rem-base:10px;
html {
  font-size: 10px;
} 

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } /* // Turn 0rem into 0 */
  @return $value;
}

@function rem($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
  $remValues: (); 
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}


// @function rem-calc($size) {
//   $remSize: $size / 16;
//   @return #{$remSize}rem;
// }